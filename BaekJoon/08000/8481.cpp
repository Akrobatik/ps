// Title : Generator
// Link  : https://www.acmicpc.net/problem/8481 
// Time  : 176 ms
// Memory: 6392 KB

#include <bits/stdc++.h>

using namespace std;

using Func = void (*)(ostream&);

void F0(ostream& os) {
  os << "ONTAK 2010";
}

void F1(ostream& os) {
  string str = "Godzilla terrorizes Bajtoly lower again. Every day a monster comes out of the ocean, slow movement of marching through the city to some of the skyscrapers and eats it with people who are in it. Eating one skyscraper takes the whole day, at dusk, it returns to its hiding place hidden in the depths. To make matters worse, going through the city, Godzilla wags its tail and destroys towers, near the passes. The prospect of becoming a meal for an underwater monster, to discourage some residents spent in uncomfort- tion in the city. During the night of each tower is derived as a resident and flees to the countryside. In Bajtogrodzie skyscrapers were built only at street crossings. At each intersection there is exactly one building. Junctions are connected by two-way streets. In addition, a the junction is just above the ocean, this is where Godzilla begins its destructive journey through the city. During the investigation, the monster moves only in the streets. Godzilla noted that he must hurry up with the consumption of residents and carefully choose the skyscrapers devouring and streets, which reaches them. Of course, choosing never previously consumed or destroyed- wanego skyscraper. What is the maximum number of people who can eat before the city completely desolate? Entrance The first line of standard input contains two integers him (1 n 100 000, 0 500 000 m) respectively denoting the number of intersections in the city and the number of connecting streets. Crossroads numbers are numbered from 1 to n, junction 1 is located on the shores of the ocean. Next row contains a sequence of integers n s (0 s 100 000) to describe population skyscrapers at various intersections. In each of the next m rows are the two integers ai and bi (1 ai, bi n, ai = bi), which means that there is a road junction connecting ai and bi. The crossing number One can reach any other intersection in the city. Exit Write to stdout the number of people who eat Godzilla for the optimum choice of meals and roads through the city every day. Example For input: the result is correct: 5 5 11 1 3 2 4 7 1 2 1 3 2 3 2 4 3 5";

  vector<int> cnt(str.size());
  for (int i = 0; i < str.size(); i++) {
    cnt[i] = 2932 - (i * i) % 2932;
  }
  for (int i = 0; i < str.size(); i++) {
    while (cnt[i]--) os << str[i];
  }
}

void F2(ostream& os) {
  constexpr int64_t kMod = 9099099909999099999ll;

  vector<int64_t> arr{1, 1};
  for (int i = 2; i < 10000; i++) {
    int64_t x = ((__int128_t)arr[arr.size() - 2] + arr.back()) % kMod;
    arr.push_back(x);
  }

  for (auto e : arr) {
    os << e << ", ";
  }
  os << "0.";
}

void F3(ostream& os) {
  string str =
      ".####..##..##.######..##...##..##.....####...####..###..####."
      "##..##.###.##...##...####..##.##.....##..##.##..##..##.##..##"
      "##..##.##.###...##..##..##.####.........##..##..##..##.##..##"
      "##..##.##..##...##..######.##.##......##....##..##..##.##..##"
      ".####..##..##...##..##..##.##..##....######..####...##..####.";

  vector<vector<int>> memo(1024, vector<int>(1024, -1));

  function<int(int, int)> Calc = [&](int i, int j) {
    if (j < 0 || j > i) return 0;
    auto& res = memo[i][j];
    if (res != -1) return res;
    if (j == 0 || j == i) return res = 1;
    return res = Calc(i - 1, j - 1) ^ Calc(i - 1, j);
  };

  int k = 0;
  for (int i = 1023; i >= 0; i--) {
    for (int j = 0; j <= i; j++) {
      int y = 1023 - i, x = j;
      if (506 <= y && y <= 510 && 449 <= x && x <= 509) {
        os << str[k++];
      } else {
        os << (Calc(i, j) ? "#" : ".");
      }
    }
    if (i) os << "\n";
  }
}

void F4(ostream& os) {
  constexpr int kMax = 400002;
  vector<bool> seive(kMax + 1);
  vector<int> primes;
  for (int i = 2; i <= kMax; i++) {
    if (!seive[i]) primes.push_back(i);
    for (auto p : primes) {
      if (i * p > kMax) break;
      seive[i * p] = true;
      if (i % p == 0) break;
    }
  }
  vector<string> board(5000, string(80, '0'));
  auto it = seive.begin() + 2;
  for (int i = 0; i < 5000; i++) {
    for (auto& c : board[i]) c += *it++;
    if (i == 3333) memcpy(board[i].data() + 8, "9099099909999099999", 19);
    os << board[i] << "\n";
  }
}

void F5(ostream& os) {
  vector<string> years = {
      "dwutysiecznego",
      "pierwszego",
      "drugiego",
      "trzeciego",
      "czwartego",
      "piatego",
      "szostego",
      "siodmego",
      "osmego",
      "dziewiatego",
      "dziesiatego",
      "jedenastego",
      "dwunastego",
      "trzynastego",
      "czternastego",
      "pietnastego",
      "szesnastego",
      "siedemnastego",
      "osiemnastego",
      "dziewietnastego",
      "dwudziestego",
  };

  vector<string> months = {
      "",
      "stycznia",
      "lutego",
      "marca",
      "kwietnia",
      "maja",
      "czerwca",
      "lipca",
      "sierpnia",
      "wrzesnia",
      "pazdziernika",
      "listopada",
      "grudnia",
  };

  vector<string> num1 = {
      "",
      "pierwszy",
      "drugi",
      "trzeci",
      "czwarty",
      "piaty",
      "szosty",
      "siodmy",
      "osmy",
      "dziewiaty",
      "dziesiaty",
      "jedenasty",
      "dwunasty",
      "trzynasty",
      "czternasty",
      "pietnasty",
      "szesnasty",
      "siedemnasty",
      "osiemnasty",
      "dziewietnasty",
  };

  vector<string> num2 = {
      "",
      "",
      "dwudziesty",
      "trzydziesty",
      "czterdziesty",
      "piecdziesiaty",
      "szescdziesiaty",
      "siedemdziesiaty",
      "osiemdziesiaty",
      "dziewiecdziesiaty",
  };

  vector<string> num3 = {
      "",
      "sto",
      "dwiescie",
      "trzysta",
  };

  vector<string> num4 = {
      "",
      "setny",
      "dwusetny",
      "trzysetny",
  };

  vector<int> ndays = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

  auto ToString = [&](int n) {
    function<string(int)> F = [&](int n) {
      if (n % 100 == 0) return num4[n / 100];
      if (n >= 100) return num3[n / 100] + " " + F(n % 100);
      if (n < 20) return num1[n];
      return num2[n / 10] + " " + num1[n % 10];
    };

    auto str = F(n);
    while (!str.empty() && str.back() == ' ') str.pop_back();
    return str;
  };

  for (int i = 0; i <= 20; i++) {
    int nth = 0;
    for (int j = 1; j <= 12; j++) {
      int limit = ndays[j] + (i % 4 == 0 && j == 2);
      for (int k = 1; k <= limit; k++) {
        ++nth;

        if (i == 7 && j == 4 && k == 1) {
          os << "Pierwszego kwietnia jest prima aprilis.\n";
          continue;
        }

        if (i == 13 && j == 6 && k == 1) {
          os << "Pierwszego czerwca jest dzien dziecka.\n";
          continue;
        }

        string sday = ToString(k);
        string smon = months[j];
        string snth = ToString(nth);
        string smid = (i ? " dzien roku dwa tysiace " : " dzien roku ");
        string syear = years[i];
        sday[0] -= 32;
        os << sday << " " << smon << " to " << snth << smid << syear << ".\n";
      }
    }
  }
  os << "Koniec.";
}

void F6(ostream& os) {
  vector<int64_t> fact(21), pos(21);
  fact[0] = 1;
  for (int i = 1; i <= 20; i++) {
    fact[i] = fact[i - 1] * i;
    pos[i] = pos[i - 1] + fact[i];
  }

  for (int i = 1; i <= 20000; i++) {
    int64_t n = (int64_t)i * i * i * i;

    int sz = 0;
    while (pos[sz] < n) ++sz;
    int64_t idx = n - pos[sz - 1] - 1;

    string pool;
    pool.resize(sz);
    iota(pool.begin(), pool.end(), 'a');

    string perm;
    perm.reserve(sz);
    while (sz--) {
      int64_t x = fact[sz];
      int y = idx / x;
      perm.push_back(pool[y]);
      pool.erase(y, 1);
      idx %= x;
    }

    if (i == 10000) {
      os << "T[" << n << "]=\"9099099909999099999\"\n";
    } else {
      os << "T[" << n << "]=\"" << perm << "\"\n";
    }
  }
}

void F7(ostream& os) {
  vector<string> board(492, string(1000, '.'));

  int cy = 0, cx = 0, dy = 6;
  int dx[] = {6, 3, 6, 2, 6};
  int pad[] = {1, 1, 1, 4, 1};
  string dots[] = {
      ".####.##..####..####..##.####.",
      "###.##.##.##.##",
      ".####.##..##...##..##...######",
      "......##.#",
      ".####.##..##.#####....##.####.",
  };

  vector<string> strs = {
      "01020102001020021020001020010200120000120001200102010200120120012001200102012001020102012001020102010102010201200120012012001220100200012002010201020102010200",
      "120012012001200120012001200120012001200120012012001201002000102001201200020020010020102001200001020102000120002010200102020000102001202002102001200202010201",
      "0201020010020201020201020200120010001200201200102012001200120102012002100002010200010200012022020012020102020102020102010909909990999909999902010200120012",
      "0012010201020102012001201201020120102012002001020012001200120012000120012001200210200120000120012001201200120102001001001001010100101000020102010200102001020001",
  };

  auto GetId = [](char c) {
    if (c == '.') return 3;
    if (c == '9') return 4;
    return (int)(c - '0');
  };

  auto Move = [&](const string& s) {
    int x = cx;
    for (auto c : s) {
      if (x >= 1000) {
        cy += dy;
        cx = 0;
        return;
      }
      int id = GetId(c);
      x += dx[id] + pad[id];
    }
  };

  auto Print = [&](char c) {
    int id = GetId(c);
    int w = dx[id];
    if (cx + w > 1000) cy += dy, cx = 0;
    for (int i = 0; i < dots[id].size(); i++) {
      int y = cy + i / w, x = cx + i % w;
      board[y][x] = dots[id][i];
    }
    cx += w + pad[id];
  };

  auto Mul2 = [](const string& s) {
    vector<int8_t> digits(s.size());
    int n = s.size();
    for (int i = 0; i < n; i++) {
      digits[n - i - 1] = (s[i] - '0') << 1;
    }

    int carry = 0;
    for (auto& digit : digits) {
      digit += carry;
      if (digit >= 3) {
        digit -= 3;
        carry = 1;
      } else {
        carry = 0;
      }
    }
    if (carry) digits.push_back(1);

    while (!digits.empty() && digits.back() == 0) digits.pop_back();
    string res;
    res.resize(digits.size());
    auto it = res.begin();
    for (auto digit : views::reverse(digits)) {
      *it++ = digit + '0';
    }
    return res;
  };

  string num = "1";
  vector<string> nums;
  for (int i = 0; i <= 170; i++) {
    string nxt = Mul2(num);
    reverse(num.begin(), num.end());
    num.push_back('.');
    nums.push_back(num);
    num.swap(nxt);
  }
  nums.push_back("0.");

  int oy = 0;
  for (auto& s : nums) {
    Move(s);
    for (auto c : s) Print(c);
  }
  for (int i = 0; i < strs.size(); i++) {
    cy = 469 + i * dy, cx = 0;
    for (auto c : strs[i]) Print(c);
  }

  board[466][643] = '#';
  for (auto& s : board) os << s << "\n";
}

void F8(ostream& os) {
  constexpr const char* kPath =






















      "5353353533535335335335333533533353353335333353335333353333533333533335333335333335333335333335333335333353333353333353333353333533333533335333335333335333335333333533333353333333533333333333533333333333333333333333333330333333333303333330333330333303330333033303330330330330330330330330303303303033030330303303030330303303030330303303030330303303030330303303033030330303033030330303033030303303030303033030303030303003030303003030030030030030003000300003000000000030000000000000001000001000010000100010010001000100100100010010010001001001000100100100010010001001000100100010010010001001001001001001010010010101001010101010101010101010110101011011011011011011011101110111011101111011111011111101111111011111111101111111111111101111111111111111110111111111111111111111011111111111111111101111111111111111101111111111111111111111111111111111111111111111111111111211111111211111121111121111211121111211211121121121121121121211212112121212121121212121212122121212121212212121212212121221212122121212212121"









  constexpr pair<int, int> kDelta[] = {
      {-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};

  vector<string> board(1000, string(1000, '.'));

  int y = 500, x = 500;
  board[y][x] = '#';
  for (int i = 0; kPath[i]; i++) {
    auto [dy, dx] = kDelta[kPath[i] - '0'];
    y += dy, x += dx;
    board[y][x] = '#';
  }

  for (auto& s : board) os << s << "\n";
}

void F9(ostream& os) {
  constexpr tuple<int, int, int, int> kLines[] = {
      {1, 812, 131, 682},
      {2, 544, 2, 986},
      {13, 488, 13, 535},
      {15, 636, 889, 636},
      {21, 110, 75, 56},
      {22, 506, 785, 506},
      {24, 146, 868, 146},
      {27, 388, 27, 504},
      {27, 476, 71, 432},
      {38, 296, 245, 296},
      {39, 840, 650, 840},
      {42, 76, 371, 76},
      {42, 408, 194, 408},
      {46, 258, 110, 258},
      {47, 790, 47, 1002},
      {48, 0, 48, 19},
      {50, 872, 578, 344},
      {54, 398, 115, 398},
      {55, 703, 55, 933},
      {59, 233, 292, 0},
      {62, 96, 236, 96},
      {63, 854, 63, 1002},
      {64, 0, 64, 296},
      {64, 657, 361, 360},
      {65, 428, 815, 428},
      {66, 246, 344, 246},
      {67, 636, 76, 645},
      {69, 824, 371, 824},
      {70, 50, 901, 881},
      {72, 661, 329, 404},
      {77, 856, 799, 856},
      {80, 70, 80, 933},
      {83, 124, 588, 124},
      {90, 396, 132, 396},
      {91, 612, 908, 612},
      {91, 642, 348, 899},
      {98, 84, 468, 454},
      {99, 506, 99, 511},
      {99, 831, 291, 639},
      {103, 736, 226, 736},
      {106, 202, 149, 202},
      {106, 590, 518, 1002},
      {108, 827, 283, 1002},
      {109, 670, 201, 670},
      {112, 674, 769, 674},
      {121, 898, 539, 898},
      {122, 841, 125, 838},
      {124, 678, 124, 1002},
      {125, 0, 125, 912},
      {128, 454, 128, 460},
      {129, 484, 836, 484},
      {130, 477, 289, 318},
      {131, 707, 225, 801},
      {135, 680, 135, 810},
      {135, 734, 398, 734},
      {141, 872, 141, 988},
      {143, 151, 294, 0},
      {143, 362, 143, 559},
      {149, 816, 650, 816},
      {150, 620, 352, 822},
      {154, 916, 240, 1002},
      {157, 428, 157, 938},
      {157, 737, 160, 734},
      {158, 198, 585, 198},
      {163, 328, 426, 328},
      {164, 207, 193, 178},
      {167, 611, 167, 921},
      {173, 978, 197, 1002},
      {175, 978, 175, 1002},
      {176, 0, 176, 314},
      {177, 696, 478, 696},
      {179, 956, 937, 956},
      {180, 122, 970, 122},
      {182, 347, 182, 617},
      {188, 374, 188, 576},
      {191, 373, 194, 370},
      {194, 391, 410, 175},
      {195, 24, 744, 24},
      {199, 592, 503, 288},
      {201, 470, 668, 937},
      {202, 0, 535, 333},
      {205, 767, 205, 903},
      {207, 564, 970, 564},
      {208, 236, 694, 236},
      {212, 676, 241, 705},
      {215, 895, 288, 822},
      {218, 780, 643, 780},
      {226, 55, 281, 0},
      {227, 302, 227, 537},
      {229, 348, 522, 348},
      {230, 556, 676, 1002},
      {237, 412, 649, 0},
      {238, 84, 238, 247},
      {242, 238, 427, 423},
      {245, 0, 290, 45},
      {253, 303, 556, 0},
      {256, 756, 578, 756},
      {257, 724, 257, 1002},
      {258, 0, 258, 221},
      {259, 853, 508, 604},
      {260, 215, 888, 843},
      {260, 964, 566, 658},
      {261, 356, 261, 957},
      {264, 760, 320, 760},
      {268, 874, 268, 913},
      {278, 345, 278, 453},
      {282, 570, 795, 570},
      {282, 824, 285, 827},
      {283, 454, 909, 454},
      {283, 552, 283, 898},
      {283, 823, 286, 826},
      {284, 1002, 578, 708},
      {288, 0, 695, 407},
      {289, 401, 703, 815},
      {291, 849, 875, 265},
      {295, 1002, 539, 758},
      {297, 183, 408, 72},
      {297, 192, 483, 192},
      {297, 1002, 459, 840},
      {298, 670, 298, 1002},
      {299, 0, 299, 182},
      {301, 338, 448, 485},
      {302, 274, 871, 274},
      {305, 292, 872, 859},
      {306, 312, 432, 438},
      {306, 580, 455, 729},
      {306, 811, 425, 692},
      {307, 102, 763, 102},
      {312, 326, 696, 326},
      {320, 739, 455, 604},
      {321, 332, 877, 332},
      {323, 329, 326, 326},
      {324, 715, 874, 165},
      {324, 887, 324, 1002},
      {325, 0, 325, 339},
      {325, 450, 946, 450},
      {325, 677, 550, 452},
      {345, 810, 907, 810},
      {352, 839, 480, 967},
      {359, 586, 381, 586},
      {362, 943, 362, 1002},
      {363, 0, 363, 754},
      {368, 840, 826, 382},
      {369, 501, 369, 663},
      {376, 314, 493, 314},
      {381, 772, 563, 590},
      {384, 706, 384, 807},
      {385, 26, 561, 26},
      {390, 941, 840, 491},
      {396, 724, 674, 1002},
      {397, 572, 697, 872},
      {400, 746, 587, 746},
      {406, 632, 630, 632},
      {413, 571, 753, 231},
      {415, 99, 514, 0},
      {417, 217, 489, 145},
      {420, 506, 752, 174},
      {420, 966, 420, 1002},
      {421, 0, 421, 204},
      {423, 604, 860, 604},
      {426, 643, 748, 321},
      {427, 800, 629, 800},
      {429, 208, 882, 661},
      {434, 944, 481, 944},
      {436, 284, 436, 584},
      {438, 384, 702, 120},
      {443, 322, 521, 244},
      {453, 302, 635, 484},
      {456, 448, 654, 646},
      {466, 686, 466, 1002},
      {467, 0, 467, 94},
      {468, 674, 468, 729},
      {470, 800, 473, 797},
      {470, 958, 526, 958},
      {473, 778, 473, 858},
      {473, 803, 476, 800},
      {474, 261, 474, 387},
      {474, 867, 609, 1002},
      {480, 719, 553, 646},
      {485, 810, 485, 813},
      {486, 50, 486, 486},
      {491, 119, 604, 6},
      {501, 481, 558, 424},
      {512, 995, 584, 923},
      {513, 478, 513, 489},
      {516, 454, 643, 581},
      {517, 1002, 565, 954},
      {518, 538, 983, 538},
      {519, 166, 886, 166},
      {523, 0, 630, 107},
      {524, 562, 814, 852},
      {524, 856, 527, 853},
      {525, 830, 525, 1002},
      {525, 857, 528, 854},
      {526, 0, 526, 213},
      {526, 24, 529, 27},
      {526, 119, 529, 122},
      {526, 878, 526, 1002},
      {527, 0, 527, 461},
      {529, 515, 671, 657},
      {542, 590, 630, 502},
      {544, 376, 772, 376},
      {552, 474, 948, 474},
      {555, 16, 725, 186},
      {559, 1002, 710, 851},
      {561, 69, 561, 353},
      {564, 224, 705, 365},
      {564, 444, 779, 659},
      {569, 881, 865, 585},
      {574, 964, 606, 964},
      {576, 278, 576, 734},
      {576, 618, 947, 618},
      {577, 514, 577, 542},
      {579, 858, 723, 1002},
      {584, 606, 766, 606},
      {587, 860, 620, 860},
      {592, 606, 592, 1002},
      {593, 0, 593, 35},
      {606, 244, 606, 895},
      {614, 0, 703, 89},
      {618, 606, 622, 602},
      {619, 446, 619, 709},
      {619, 603, 622, 606},
      {619, 607, 623, 603},
      {620, 832, 878, 832},
      {621, 410, 621, 640},
      {621, 489, 645, 513},
      {624, 852, 774, 1002},
      {627, 348, 786, 507},
      {651, 987, 651, 1002},
      {652, 0, 652, 517},
      {652, 1002, 760, 894},
      {654, 266, 926, 266},
      {654, 483, 672, 501},
      {657, 502, 856, 701},
      {679, 0, 853, 174},
      {680, 0, 680, 29},
      {681, 0, 781, 100},
      {684, 488, 684, 546},
      {691, 349, 770, 428},
      {696, 764, 891, 764},
      {698, 402, 710, 402},
      {698, 523, 698, 653},
      {710, 610, 748, 610},
      {711, 377, 804, 284},
      {717, 222, 717, 591},
      {717, 597, 935, 379},
      {728, 0, 908, 180},
      {735, 606, 966, 837},
      {742, 294, 878, 430},
      {746, 38, 746, 361},
      {750, 544, 907, 701},
      {751, 552, 886, 552},
      {753, 444, 753, 1002},
      {754, 0, 754, 83},
      {755, 180, 821, 180},
      {772, 355, 904, 223},
      {772, 969, 994, 747},
      {779, 0, 894, 115},
      {782, 980, 804, 1002},
      {783, 793, 837, 847},
      {794, 990, 836, 990},
      {809, 0, 983, 174},
      {812, 76, 866, 130},
      {832, 775, 832, 921},
      {832, 898, 972, 898},
      {834, 204, 834, 210},
      {836, 327, 906, 397},
      {856, 360, 856, 825},
      {857, 523, 857, 538},
      {858, 295, 858, 465},
      {890, 529, 984, 435},
      {893, 103, 979, 189},
      {894, 84, 945, 135},
      {901, 566, 919, 584},
      {917, 688, 917, 877},
      {919, 674, 941, 652},
      {921, 934, 921, 1002},
      {922, 0, 922, 299},
      {926, 463, 984, 405},
      {935, 371, 935, 649},
      {938, 625, 996, 683},
      {942, 174, 999, 231},
      {951, 403, 959, 411},
      {957, 524, 975, 524},
      {960, 601, 960, 845},
      {967, 903, 977, 893},
      {992, 197, 992, 943},
      {994, 583, 994, 1002},
      {995, 0, 995, 45},
  };

  constexpr pair<int, int> kPoints[] = {
      {2, 986},
      {13, 535},
      {27, 504},
      {47, 1002},
      {48, 19},
      {55, 933},
      {63, 1002},
      {71, 432},
      {75, 56},
      {80, 933},
      {99, 511},
      {110, 258},
      {115, 398},
      {124, 1002},
      {125, 912},
      {128, 460},
      {132, 396},
      {135, 810},
      {141, 988},
      {143, 559},
      {149, 202},
      {157, 938},
      {167, 921},
      {175, 1002},
      {176, 314},
      {182, 617},
      {188, 576},
      {193, 178},
      {194, 370},
      {194, 408},
      {197, 1002},
      {201, 670},
      {205, 903},
      {225, 801},
      {226, 736},
      {227, 537},
      {236, 96},
      {238, 247},
      {240, 1002},
      {241, 705},
      {245, 296},
      {257, 1002},
      {258, 221},
      {261, 957},
      {268, 913},
      {278, 453},
      {281, 0},
      {283, 1002},
      {288, 822},
      {289, 318},
      {290, 45},
      {291, 639},
      {292, 0},
      {294, 0},
      {298, 1002},
      {299, 182},
      {314, 197},
      {314, 199},
      {320, 760},
      {324, 1002},
      {325, 339},
      {329, 404},
      {344, 246},
      {348, 899},
      {352, 822},
      {361, 360},
      {362, 1002},
      {369, 663},
      {371, 76},
      {371, 824},
      {381, 586},
      {384, 807},
      {398, 734},
      {408, 72},
      {410, 175},
      {420, 1002},
      {421, 204},
      {425, 692},
      {426, 328},
      {427, 423},
      {432, 438},
      {436, 584},
      {448, 485},
      {455, 729},
      {466, 1002},
      {467, 94},
      {468, 729},
      {474, 387},
      {478, 696},
      {480, 967},
      {481, 944},
      {483, 192},
      {486, 486},
      {489, 145},
      {493, 314},
      {503, 288},
      {514, 0},
      {518, 1002},
      {521, 244},
      {522, 348},
      {525, 1002},
      {526, 213},
      {526, 1002},
      {527, 461},
      {535, 333},
      {539, 758},
      {539, 898},
      {550, 452},
      {553, 646},
      {556, 0},
      {558, 424},
      {561, 26},
      {561, 353},
      {563, 590},
      {565, 954},
      {566, 658},
      {576, 734},
      {577, 542},
      {578, 344},
      {578, 708},
      {578, 756},
      {584, 923},
      {585, 198},
      {587, 746},
      {588, 124},
      {592, 1002},
      {593, 35},
      {604, 6},
      {606, 895},
      {606, 964},
      {609, 1002},
      {619, 709},
      {620, 860},
      {621, 640},
      {629, 800},
      {630, 107},
      {630, 502},
      {630, 632},
      {643, 581},
      {643, 780},
      {645, 513},
      {649, 0},
      {650, 816},
      {650, 840},
      {651, 1002},
      {652, 517},
      {654, 646},
      {668, 937},
      {671, 657},
      {672, 501},
      {674, 1002},
      {676, 1002},
      {680, 29},
      {684, 546},
      {694, 236},
      {695, 407},
      {696, 326},
      {696, 393},
      {697, 392},
      {697, 872},
      {698, 391},
      {702, 120},
      {703, 89},
      {703, 815},
      {705, 365},
      {710, 402},
      {710, 851},
      {717, 591},
      {723, 1002},
      {725, 186},
      {744, 24},
      {746, 361},
      {748, 321},
      {748, 610},
      {752, 174},
      {753, 231},
      {753, 1002},
      {754, 83},
      {760, 894},
      {763, 102},
      {766, 606},
      {769, 674},
      {772, 376},
      {774, 1002},
      {779, 659},
      {781, 100},
      {786, 507},
      {795, 570},
      {799, 856},
      {804, 284},
      {804, 1002},
      {814, 852},
      {815, 428},
      {821, 180},
      {826, 382},
      {832, 921},
      {834, 210},
      {836, 484},
      {836, 990},
      {837, 847},
      {840, 491},
      {853, 174},
      {856, 825},
      {858, 465},
      {860, 604},
      {865, 585},
      {866, 130},
      {868, 146},
      {871, 274},
      {872, 859},
      {874, 165},
      {875, 265},
      {877, 332},
      {878, 430},
      {878, 832},
      {882, 661},
      {886, 166},
      {886, 552},
      {888, 843},
      {889, 636},
      {891, 764},
      {894, 115},
      {901, 881},
      {904, 223},
      {906, 397},
      {907, 701},
      {907, 810},
      {908, 180},
      {908, 612},
      {909, 454},
      {917, 877},
      {919, 584},
      {921, 1002},
      {922, 299},
      {926, 266},
      {935, 649},
      {937, 956},
      {941, 652},
      {945, 135},
      {946, 450},
      {947, 618},
      {948, 474},
      {959, 411},
      {960, 845},
      {966, 837},
      {970, 122},
      {970, 564},
      {975, 524},
      {977, 893},
      {979, 189},
      {983, 174},
      {983, 538},
      {984, 405},
      {984, 435},
      {992, 943},
      {994, 1002},
      {995, 45},
      {996, 683},
      {999, 231},
  };

  vector<string> board(1003, string(1003, '.'));
  for (auto [y1, x1, y2, x2] : kLines) {
    int dy = 0, dx = 0;
    if (y2 > y1) dy = 1;
    if (x2 > x1) dx = 1;
    if (x2 < x1) dx = -1;
    for (int y = y1, x = x1; y != y2 || x != x2; y += dy, x += dx) {
      board[y][x] = '#';
    }
  }
  for (auto [y, x] : kPoints) {
    board[y][x] = '#';
  }

  for (auto& s : board) os << s << "\n";
}

struct Matrix {
  Matrix() : n(0), mat{} {}

  void Init(int _n) {
    n = _n;
    mat.assign(n * n, 0);
  }

  bitset<70>& operator[](int r) { return mat[r]; }
  const bitset<70>& operator[](int r) const { return mat[r]; }

  friend Matrix operator*(const Matrix& m1, const Matrix& m2) {
    int sz = m1.n;
    Matrix m, mt;
    m.Init(sz), mt.Init(sz);
    for (int i = 0; i < sz; i++) {
      for (int j = 0; j < sz; j++) {
        if (m2[j].test(i)) mt[i].set(j);
      }
    }
    for (int i = 0; i < sz; i++) {
      for (int j = 0; j < sz; j++) {
        if ((m1[i] & mt[j]).count() & 1) m[i].set(j);
      }
    }
    return m;
  }

  int n;
  vector<bitset<70>> mat;
};

void F10(ostream& os) {
  auto PrintA = [&](int n, const string& s) {
    string pad = string(8 + (n >= 10), ' ');
    pad[1] = '\n';
    os << "a_" << n << " = ";
    for (int i = 0; i < s.size(); i++) {
      os << s[i];
      if (i + 1 != s.size()) {
        if (i % 40 == 39 && i + 1 != s.size()) {
          os << pad;
        } else {
          os << " ";
        }
      }
    }
    os << "\n\n";
  };

  auto PrintB = [&](int n, const Matrix& a, const Matrix& b) {
    int r = n >> 1;
    string apad(6 + (n >= 10), ' ');
    string bpad(8 + (n >= 10), ' ');
    os << "\n";
    for (int i = 0; i < n; i++) {
      if (i == r) {
        os << "A_" << n << " = ";
      } else {
        os << apad;
      }
      for (int j = 0; j < n; j++) os << (char)(a[i][j] + '0') << " ";
      if (i == r) {
        os << "  B_" << n << " = ";
      } else {
        os << bpad;
      }
      for (int j = 0; j < n; j++) os << (char)(b[i][j] + '0') << (j + 1 != n ? " " : "\n");
    }
  };

  function<Matrix(const Matrix&, int64_t)> Power = [&](const Matrix& m, int64_t exp) {
    if (exp == 1) return m;
    auto res = Power(m, exp >> 1);
    res = res * res;
    if (exp & 1) res = res * m;
    return res;
  };

  vector<string> arr(20);
  arr[1] = "0", arr[2] = "01";
  for (int i = 3; i < arr.size(); i++) {
    arr[i] = arr[i - 1] + arr[i - 2];
  }

  vector<Matrix> brr(71), crr(71);
  for (int i = 1; i <= 70; i++) {
    auto& mat = brr[i];
    mat.Init(i);
    auto it = arr.back().begin();
    for (int j = 0; j < i; j++) {
      for (int k = 0; k < i; k++) {
        if (*it++ == '1') mat[j].set(k);
      }
    }
    crr[i] = Power(mat, 9099099909999099999ll);
  }

  os << "a_i = a_{i-1} . a_{i-2}\n\n";
  for (int i = 1; i <= 15; i++) {
    PrintA(i, arr[i]);
  }
  os << "\n(A_i)^n = B_i (mod 2)\n";
  for (int i = 1; i <= 70; i++) {
    PrintB(i, brr[i], crr[i]);
  }
}

bool Test(Func f, const string& ans) {
  ifstream ifs(ans, ios::binary);
  vector<char> in((istreambuf_iterator<char>(ifs)), {});
  while (!in.empty() && in.back() <= 0x20) in.pop_back();
  ifs.close();

  ostringstream oss;
  f(oss);
  ofstream ofs("D:/boj/2.txt", ios::binary);
  f(ofs);
  ofs.close();
  string s = oss.str();
  while (!s.empty() && s.back() <= 0x20) s.pop_back();
  cerr << s.size() << " " << in.size() << "\n";
  bool ok = false;
  if (s.size() == in.size()) {
    ok = true;
    for (int i = 0; ok && i < s.size(); i++) {
      ok = (s[i] == in[i]);
    }
  }
  return ok;
}

Func func[] = {F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10};

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  int t;
  cin >> t;
  // string s = "D:/boj/genzaw/gen" + to_string(t) + ".out";
  // cerr << Test(func[t], s);
  func[t](cout);

  return 0;
}
