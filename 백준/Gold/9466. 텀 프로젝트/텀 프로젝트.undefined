#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx,avx2,fma")

#include <immintrin.h>
#include <malloc.h>
#include <memory.h>
#include <stdio.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>

using namespace std;

#define R(x)                        \
  x = 0;                            \
  ii = 0;                           \
  do x = x * 10 + *in - '0';        \
  while (*++in >= '0' && ++ii < 7); \
  ++in;

#define W(x)                               \
  if (x == 0) {                            \
    *out++ = '0';                          \
  } else {                                 \
    on = 0;                                \
    while (x) tmp[on++] = x % 10, x /= 10; \
    while (on--) *out++ = tmp[on] + '0';   \
  }                                        \
  *out++ = '\n';

int main() {
  struct stat st;
  fstat(0, &st);
  char* in = (char*)mmap(0, st.st_size, PROT_READ, MAP_SHARED, 0, 0);
  int ii;

  char obuf[1 << 10];
  char tmp[8];
  int on;
  auto out = obuf;

  const __m256i kZero = _mm256_setzero_si256();

  int votes[100001];
  int cands[100000];
  char memo[100001];
  int R(t);
  while (t--) {
    int s = 0, R(n);
    auto buf = (__m256i*)(memo + 1);
    for (int i = 0; i < n; i += 32) {
      _mm256_storeu_si256(buf++, kZero);
    }

    int i = 0;
    while (i++ != n) {
      R(votes[i]);
      ++memo[votes[i]];
    }
    auto ce = cands;
    while (--i) {
      if (memo[i]) continue;
      *ce++ = i;
    }
    while (ce-- != cands) {
      int cur = *ce;
      do ++s, --memo[cur], cur = votes[cur];
      while (--memo[cur] == 0);
    }
    W(s);
  }
  write(1, obuf, out - obuf);
  _exit(0);
}
